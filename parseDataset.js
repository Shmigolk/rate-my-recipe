const fs = require("fs");

const TITLE_LINE = 3;

const parseLine = (line) =>
  line.split("\t").map((cell) => cell.replace("\r", ""));

const content = fs.readFileSync("dataset.tsv", "utf8");

const lines = content.split("\n");

/**
 * Uncomment those lines to get the COLUMNS object from the line "TITLE_LINE"
 */
console.log("const COLUMNS = {");
parseLine(lines[TITLE_LINE]).forEach((columnTitle, columnIndex) => {
  console.log(`${columnIndex}: "${columnTitle}",`);
});
console.log("}");

// Generated by the script before
const COLUMNS = {
  0: "Ingredient type",
  1: "Ingredient type id",
  2: "Description",
  3: "Ingredient",
  4: "Ingredient id",
  5: "Description",
  6: "Preparation",
  7: "Health",
  8: "Environment",
  9: "Quantity ",
  10: "Quantity id",
  11: "default_weight",
  12: "default_weight_per_unit",
  13: "default_number_of_units",
  14: "image_url",
};

// Level of depths (end excluded)
const categoriesRange = [0, 3];
const ingredientsRange = [3, 9];
const quantitiesRange = [9, 15];

const createObject = (line) => {
  const rep = {};
  line.forEach((value, colIndex) => {
    if (value !== "") {
      rep[COLUMNS[colIndex]] = value;
    }
  });
  return rep;
};

const data = [];

lines.slice(TITLE_LINE + 1).forEach((line) => {
  const parsedLine = parseLine(line);

  const lineObject = createObject(parsedLine);

  const isNewCategory = parsedLine
    .slice(...categoriesRange)
    .some((cell) => cell !== "");
  const isNewIngredient = parsedLine
    .slice(...ingredientsRange)
    .some((cell) => cell !== "");
  const isNewQuantity = parsedLine
    .slice(...quantitiesRange)
    .some((cell) => cell !== "");

  if (isNewCategory) {
    data.push({ ...lineObject, ingredients: [] });
  }
  if (isNewIngredient) {
    data.at(-1).ingredients.push({ ...lineObject, quantities: [] });
  }
  if (isNewQuantity) {
    data
      .at(-1)
      .ingredients.at(-1)
      .quantities.push({ ...lineObject });
  }
});

fs.writeFile(
  "./data/ingredient_taxonomy.json",
  JSON.stringify(data, null, 2),
  (err) => {
    if (err) {
      console.error(err);
    }
    console.log("file updated");
  }
);
